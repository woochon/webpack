webpack01
1.生成package.json文件
	npm init -y

2.安装webpack会生成node_modules安装包
	npm install webpack --save-dev

3.同级目录下新建app文件夹,里面包含index.js

4.在git上输入node_modules/.bin/webpack app/index.js  build/index.js
	可以打包成build/index.js文件
	注意：webpack4.以上提示一定要安装webpack-cli,换成webpack2.3.2是吴提示的

webapck02
1.安装插件  生成index.html
	npm install html-webpack-plugin --save-dev

2.生成webpack.config.js文件写配置(不用在命令行里面敲代码)

3.在git上输入node_modules/.bin/webpack
	build文件夹下会多一个app.js文件和index.html文件

webapck03
1.在pakage.json文件的script里面输入
		"build":"webpack"   <=>  node_modules/.bin/webpack
		npm run 列出所有的命令列表

2.浏览器自动刷新
	安装自动刷新插件   npm install webpack-dev-server --save-dev
	在package.json中的scripte下
	"start":"webpack-dev-server --env development",
    	"build": "webpack --env production"
	安装之后跑不了npm run start 命令  说是没有安装脚手架？不是webpack-dev-server的版本问题
	原因是直接复制以前的代码，没有npm install 所以node_modules/.bin下没有webpack-server-dev命令
	但是能跑npm run build命令

	events.js:183
      		throw er; // Unhandled 'error' event
	端口号被占用


	这个刷新是将所有的文件重新加载一次，而不是局部刷新，通过调试下的network查看

	devServer在开发环境下的配置


webpack
## 网页中会引用那些常见的静态资源
- JS
    .js .jsx .coffee .ts(typescript类C#语言)
- CSS
    .css .less .sass .scss .stylus
- IMAGES
    .jpg .png .bmp .svg
- 字体文件（fonts）
    .svg .ttf .eof .wolff .wolff2
- 模板文件
    .ejs .jade .vue[这是在webpack中定义组件的方式，推荐这么用]

## 网页中引入的静态资源多了以后有什么问题？
1.网页加载速度慢，因为要发起很多次二次请求；
2.要处理错综复杂的依赖关系

## 如何解决上述两个问题
1.合并，压缩，精灵图，小图片的base64编码

## webpack与gulp的区别
webpack基于node.js 着眼于项目
gulp着眼于task,由许多task构成项目

## 问题
import *** from ***
由于是es6语法，浏览器解析不了，所以报错

webpack能够处理js文件的相互依赖关系
webpack能都处理js文件的箭筒问题，把高级语法转化为低级语法，浏览器能够识别

## 在控制台，直接输入webpack命令时，webpack做了以下几步：
1.首先，webpack发现我们并没有通过命令的形式，给它指定入口和出口；
2.webpack就会去项目的根目录中，查找一个叫做'webpack.config.js'的配置文件
3.当找到配置文件时，webpack会解析这个配置文件

## webpack-dev-server 在内存中生成虚拟文件  
配置命令1
webpack-dev-server --open --port 3000 --contentBase src
--open自动打开浏览器
--port 3000 指定端口号为3000
--contentBase 以src作为默认打开的路径  以src/index.html
--compress  //开启gzip压缩
--hot 1.实现浏览器无刷新自动更新，2不会重新打包生成bundle.js，只是添加补丁(.hot-update.js和.hot-update.json)
配置命令2 
devServer{
	open:true,
	port:3000,
	contentBase:'src', //指定托管的根目录
	hot:true,   	
}
启用热更新
1.hot:true,
2.const webpack = require('webpack');
3.plugins:[
	new webpack.HotModuleReplacementPlugin() 
]

## html-webpack-plugin
1.在内存中生成html虚拟文件
new HtmlWebpackPlugin({
            template:path.join(_dirname,'./src/index.html'),  //指定模板页面，将来会根据指定的页面路径，去生成内存中的页面
            filename:'index.html'  // 指定生成页面的名称
        })
2.当使用html-webpack-plugin之后，我们不在需要手动处理bundle.js的引用路径，因为这个插件帮助我们创建了一个合适的script，并且引用了正确路径		

## import './css/index.css' 报错  
1.安装合适的loader, npm install style-loader css-loader--save-dev加载器

webpack处理第三方文件类型的过程：
1.发现这个要处理的文件不是js文件，然后去配置文件中查找有没有对应第三方loader规则，
2.如果能找到对应的规则，就会调用对应的laoder处理这种文件类型；
3.在调用loader的时候，是从后往前调用的；
4.当最后一个loader调用完毕，会把处理的结果直接交给webpack进行打包合并，最终输出到bundle.js文件中去；

less scss 
1. less-loader@3.0.0 requires a peer of less@^2.3.1
less-loader依赖less，所有需要安装一个less不低于2.3.1的版本

默认情况下，webpack无法处理css文件中的url地址，不管是图片还是字体库

## url-loader依赖file-loader
两个loader要一起安装
limit 图片大小限制 单位byte，如果引用的图片大于现在则不会转化为base64；小于就会转化

##url-laoder也能处理字体图标

## webpack通过babel,将es6，es7高级语法转发位低级语法
webpack可以运行2套命令去安装babel相关的loader
1.npm install babel-core babel-loader babel-plugin-transform-runtime --save-dev
注意:在配置babel的loader时，必须把node-modules目录，通过exclude排除：原因
①如果不排除node-module，则babel会把node-module中所有的第三方js文件都打包编译，非常消耗cpu,且打包非常慢
②哪怕babel最终将所有node-module中的js转化完毕，项目也无法正常运行
③在项目的根目录下，新建一个叫.babelrc的babel配置文件，这个文件属于json格式，所以在写.babel时，必须
  符合JSON格式即不能写注释，字符串必须用双引号
2.npm install babel-preset-env babel-preset-stage-0 --save-dev


## vue-laoder
import Login from 'src/Login.vue'
render:function(createElements){  // createElements是一个方法，调用它能够将指定的模板组件渲染为HTML结构
	return createElements(Login)  //注意return的结果会替换页面中el指定的那个容器	
}

## 在webpack构建的项目中，使用Vue进行开发
在普通网页中使用vue:
1.使用script标签，引入vue包，
2.在index页面，创建一个id为app的div容器
3.通过new Vue()得到vm的实例

在webpack中尝试vue
var vm = new Vue({
    el:'#app',
    data:{
        msg:'123'
    }
});
You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.
报错原因：runtime-only build of Vue
在webpack中，使用import Vue from 'vue'导入的Vue构造函数功能不完整，只提供了runtime-only的方式，并没有像网页中使用script标签引入的完整

默认webpack无法打包.vue文件，需要安装相应的laoder
npm install vue-laoder vue-template-compiler -D
在配置文件中，新增loader的配置项，{test:/\.vue/，use:'vue-laoder'}
vue-loader was used without the corresponding plugin.原因：
在webpack2@中使用的vue-loader@15  vue-loader的使用都是需要伴生 VueLoaderPlugin的
解决在webpack.config.js中加入
plugins: [
    // make sure to include the plugin for the magic
    new VueLoaderPlugin()
],

在webpack中使用.vue
1.安装vue的包，npm install vue -S
2.由于在vue中推荐使用.vue这个模板文件定义组件，所以需要安装能解析这种文件的loader
 npm install vue-loader vue-template-compiler -D
3.在main.js中导入vue模块， Import Vue from 'vue'
4.定义一个.vue结尾的组件，
5.使用import App from './app.vue'导入这个组件
6.创建vm实例 
var vm = new Vue({
	el:"#app",
	render：h=>h(App)
}) 
7.在页面中创建一个id为app的div元素，作为vm实例要控制的区域


node中向外暴露成员和导入
暴露：module.exports= {} 和 exports
导入：var 名称 = require('模块标识符')

在ES6中向外暴露和导入成员
暴露：export default 和  exprot
导入：import 
export default向外暴露的成员可以以任意变量来接受
在一个模块中只允许向外暴露一次export default
在一个模块中既可以使用export default，又允许exprot向外暴露成员
exprot 向外暴露多个成员，只能使用{}的形式来接受，并且名称要一致(按需导入)
import obj，{fun1,func2} from './test.js'
import obj，{fun1 as fu,func2} from './test.js'这种方式可以fu来代替 fun1

App这个组件是通过render函数渲染出来的，渲染出来的组件只能放到el:"#app"所指定的元素上
Account和GoodList 组件是通过路由监听渲染的，所以只能放到路由的<router-view></router-view>中去；

组件中的lang和scoped
scoped的原理：css选择器 组件的根元素data-v- 
/deep/ 组件的深度选择器
